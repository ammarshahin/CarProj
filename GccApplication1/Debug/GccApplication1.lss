
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000e18  00000eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080007e  0080007e  00000eca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002af1  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa8  00000000  00000000  00003da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b1f  00000000  00000000  00004d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  00006870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001150  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000219b  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000a3ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_Init>:
 * Description: This function is to initialize the car 
 *  it Don't take any thing and returns nothing
 */
void Car_Init(void)
{
	Ultrasonic_Init();
  92:	0e 94 bb 01 	call	0x376	; 0x376 <Ultrasonic_Init>
	DC_Motor_Init(DC_MOTOR_CHANNEL_0);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 9d 00 	call	0x13a	; 0x13a <DC_Motor_Init>
	DC_Motor_Init(DC_MOTOR_CHANNEL_1);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 9d 00 	call	0x13a	; 0x13a <DC_Motor_Init>
	DC_Motor_Start(DC_MOTOR_CHANNEL_0);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 15 01 	call	0x22a	; 0x22a <DC_Motor_Start>
	DC_Motor_Start(DC_MOTOR_CHANNEL_1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 15 01 	call	0x22a	; 0x22a <DC_Motor_Start>
  ae:	08 95       	ret

000000b0 <Car_Action>:
 * Description: This function is to Implement the car logic 
 *  it Don't take any thing and returns nothing
 */
void Car_Action(void)
{
	Ultrasonic_Trigger();	
  b0:	0e 94 c8 01 	call	0x390	; 0x390 <Ultrasonic_Trigger>
	uint8 distance = Ultrasonic_CalculateDistance();
  b4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Ultrasonic_CalculateDistance>
	
	if(distance > CAUTIOUS_DISTANCE) /* No obstacle Go Forward */
  b8:	6d 33       	cpi	r22, 0x3D	; 61
  ba:	30 f0       	brcs	.+12     	; 0xc8 <Car_Action+0x18>
	{
		Move_Forward();
  bc:	0e 94 82 00 	call	0x104	; 0x104 <Move_Forward>
		DC_Motor_Set_Speed(FAST_SPEED);
  c0:	84 e6       	ldi	r24, 0x64	; 100
  c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DC_Motor_Set_Speed>
  c6:	08 95       	ret
	}
	else if ( (distance < CAUTIOUS_DISTANCE) && (distance > DENGEROUS_DISTANCE) )  /* Obstacle on the near range */
  c8:	81 ee       	ldi	r24, 0xE1	; 225
  ca:	86 0f       	add	r24, r22
  cc:	8d 31       	cpi	r24, 0x1D	; 29
  ce:	60 f4       	brcc	.+24     	; 0xe8 <Car_Action+0x38>
	{
		Move_RotateRight();
  d0:	0e 94 94 00 	call	0x128	; 0x128 <Move_RotateRight>
		DC_Motor_Set_Speed(NORMAL_SPEED);
  d4:	82 e3       	ldi	r24, 0x32	; 50
  d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DC_Motor_Set_Speed>
		SwDelay_ms(DELAY_TIME_MS);
  da:	64 e6       	ldi	r22, 0x64	; 100
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SwDelay_ms>
  e6:	08 95       	ret
	}
	else if(distance < DENGEROUS_DISTANCE)  /* Obstacle is very near go back till an enough range to rotate */
  e8:	6e 31       	cpi	r22, 0x1E	; 30
  ea:	58 f4       	brcc	.+22     	; 0x102 <Car_Action+0x52>
	{
		DC_Motor_Set_Speed(SLOW_SPEED);
  ec:	8e e1       	ldi	r24, 0x1E	; 30
  ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DC_Motor_Set_Speed>
		Move_Backward();
  f2:	0e 94 8b 00 	call	0x116	; 0x116 <Move_Backward>
		SwDelay_ms(DELAY_TIME_MS);
  f6:	64 e6       	ldi	r22, 0x64	; 100
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SwDelay_ms>
 102:	08 95       	ret

00000104 <Move_Forward>:
 *  it take nothing and returns nothing
 */

void Move_Forward(void)
{
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_0, DC_MOTOR_FORWARD);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_1, DC_MOTOR_FORWARD);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
 114:	08 95       	ret

00000116 <Move_Backward>:
 * Description: This function is to make car move Backward
 *  it take nothing and returns nothing
 */
void Move_Backward(void)
{
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_0, DC_MOTOR_BACK);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_1, DC_MOTOR_BACK);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
 126:	08 95       	ret

00000128 <Move_RotateRight>:
 * Description: This function is to make car Rotate Right
 *  it take nothing and returns nothing
 */
void Move_RotateRight(void)
{
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_0, DC_MOTOR_BACK);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_1, DC_MOTOR_FORWARD);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
 138:	08 95       	ret

0000013a <DC_Motor_Init>:
		Gpio_PinWrite(DC_MOTOR_CHANNEL_0_PORT,DC_MOTOR_CHANNEL_0_PIN_1,LOW);
		Gpio_PinWrite(DC_MOTOR_CHANNEL_0_PORT,DC_MOTOR_CHANNEL_0_PIN_2,LOW);
		break;
		case DC_MOTOR_CHANNEL_1 : 
		Gpio_PinWrite(DC_MOTOR_CHANNEL_1_PORT,DC_MOTOR_CHANNEL_1_PIN_1,LOW);
		Gpio_PinWrite(DC_MOTOR_CHANNEL_1_PORT,DC_MOTOR_CHANNEL_1_PIN_2,LOW);
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 f5 02 	call	0x5ea	; 0x5ea <PWM_Init>
 144:	cc 23       	and	r28, r28
 146:	19 f0       	breq	.+6      	; 0x14e <DC_Motor_Init+0x14>
 148:	c1 30       	cpi	r28, 0x01	; 1
 14a:	b1 f0       	breq	.+44     	; 0x178 <DC_Motor_Init+0x3e>
 14c:	29 c0       	rjmp	.+82     	; 0x1a0 <DC_Motor_Init+0x66>
 14e:	4f ef       	ldi	r20, 0xFF	; 255
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	64 e0       	ldi	r22, 0x04	; 4
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <DC_Motor_Init+0x66>
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 182:	4f ef       	ldi	r20, 0xFF	; 255
 184:	68 e0       	ldi	r22, 0x08	; 8
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <DC_Motor_Set_Speed>:
 1a4:	85 36       	cpi	r24, 0x65	; 101
 1a6:	30 f4       	brcc	.+12     	; 0x1b4 <DC_Motor_Set_Speed+0x10>
 1a8:	64 e1       	ldi	r22, 0x14	; 20
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 0a 03 	call	0x614	; 0x614 <PWM_PhaseCorrect>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <DC_Motor_Set_Direction>:
 1b8:	88 23       	and	r24, r24
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <DC_Motor_Set_Direction+0xa>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	d1 f0       	breq	.+52     	; 0x1f4 <DC_Motor_Set_Direction+0x3c>
 1c0:	32 c0       	rjmp	.+100    	; 0x226 <DC_Motor_Set_Direction+0x6e>
 1c2:	66 23       	and	r22, r22
 1c4:	61 f0       	breq	.+24     	; 0x1de <DC_Motor_Set_Direction+0x26>
 1c6:	61 30       	cpi	r22, 0x01	; 1
 1c8:	71 f5       	brne	.+92     	; 0x226 <DC_Motor_Set_Direction+0x6e>
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 1dc:	24 c0       	rjmp	.+72     	; 0x226 <DC_Motor_Set_Direction+0x6e>
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <DC_Motor_Set_Direction+0x6e>
 1f4:	66 23       	and	r22, r22
 1f6:	69 f0       	breq	.+26     	; 0x212 <DC_Motor_Set_Direction+0x5a>
 1f8:	61 30       	cpi	r22, 0x01	; 1
 1fa:	a9 f4       	brne	.+42     	; 0x226 <DC_Motor_Set_Direction+0x6e>
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	68 e0       	ldi	r22, 0x08	; 8
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 210:	0a c0       	rjmp	.+20     	; 0x226 <DC_Motor_Set_Direction+0x6e>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	68 e0       	ldi	r22, 0x08	; 8
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret

0000022a <DC_Motor_Start>:
 * Description : This function is used to Start the motor Channel.
 * @pram  Channel : Set the Channel of the motor.
 * Return : the function Returns Nothing.
 */
void DC_Motor_Start(uint8 Channel)
{
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	DC_Motor_Set_Speed(DEFAULT_SPEED);
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DC_Motor_Set_Speed>
	Timers_timer1_Start();
 234:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Timers_timer1_Start>
	DC_Motor_Set_Direction(Channel,DC_MOTOR_FORWARD); // Move Forward as A default Direction
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DC_Motor_Set_Direction>
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <SwICU_Init>:
 */
uint8 SwICU_Disable(void)
{
	Timers_timer2_Stop();
	return OK;
}
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	0e 94 89 02 	call	0x512	; 0x512 <Interrupts_ExtInt_Init>
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 de 03 	call	0x7bc	; 0x7bc <Timers_Init>
 254:	0e 94 85 02 	call	0x50a	; 0x50a <Interrupts_On>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	08 95       	ret

0000025c <SwICU_Read>:
 25c:	fc 01       	movw	r30, r24
 25e:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <__data_end>
 262:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <__data_end+0x1>
 266:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <__data_end+0x2>
 26a:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <__data_end+0x3>
 26e:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <__data_end+0x4>
 272:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <__data_end+0x5>
 276:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <__data_end+0x6>
 27a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__data_end+0x7>
 27e:	70 83       	st	Z, r23
 280:	61 83       	std	Z+1, r22	; 0x01
 282:	52 83       	std	Z+2, r21	; 0x02
 284:	43 83       	std	Z+3, r20	; 0x03
 286:	34 83       	std	Z+4, r19	; 0x04
 288:	25 83       	std	Z+5, r18	; 0x05
 28a:	96 83       	std	Z+6, r25	; 0x06
 28c:	87 83       	std	Z+7, r24	; 0x07
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret

00000292 <__vector_1>:
 * Description: This is an ISR that executes when an External interrupt occurs.
 * Parameter: void 
 * Return : void
 */
ISR_T(INT0_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	if(Falling_Risin_Flag == 0)
 2b8:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <Falling_Risin_Flag>
 2bc:	81 11       	cpse	r24, r1
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <__vector_1+0x42>
	{
		Timers_timer2_Set(0);
 2c0:	0e 94 ef 04 	call	0x9de	; 0x9de <Timers_timer2_Set>
		Timers_timer2_Start();
 2c4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Timers_timer2_Start>
		numOfOverflows = 0;
 2c8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <numOfOverflows>
		Falling_Risin_Flag = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Falling_Risin_Flag>
 2d2:	2d c0       	rjmp	.+90     	; 0x32e <__vector_1+0x9c>
	}
	else if(Falling_Risin_Flag == 1)
 2d4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <Falling_Risin_Flag>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	49 f5       	brne	.+82     	; 0x32e <__vector_1+0x9c>
	{
		raising_time_ns =  ( ( (numOfOverflows * REGISTER_BIT_MAXVALUE) + Timers_timer2_Read()) * ( F_CPU_PRESCALLER_FACTOR /F_CPU ) );
 2dc:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <numOfOverflows>
 2e0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timers_timer2_Read>
 2e4:	ac 2f       	mov	r26, r28
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	ba 2f       	mov	r27, r26
 2ea:	aa 27       	eor	r26, r26
 2ec:	a8 0f       	add	r26, r24
 2ee:	b1 1d       	adc	r27, r1
 2f0:	2d e7       	ldi	r18, 0x7D	; 125
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__usmulhisi3>
 2f8:	dc 01       	movw	r26, r24
 2fa:	cb 01       	movw	r24, r22
 2fc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
 300:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
 304:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__data_end+0x2>
 308:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <__data_end+0x3>
 30c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end+0x4>
 310:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x5>
 314:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end+0x6>
 318:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__data_end+0x7>
		Timers_timer1_Stop();
 31c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Timers_timer1_Stop>
		numOfOverflows = 0;
 320:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <numOfOverflows>
		Timers_timer2_Set(0);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 ef 04 	call	0x9de	; 0x9de <Timers_timer2_Set>
		Falling_Risin_Flag = 0;
 32a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Falling_Risin_Flag>
	}
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_5>:
 * Description: This is an ISR that executes when the timer 2 overflows.
 * Parameter: void 
 * Return : void
 */
ISR_T(TIMER2_OVF_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
	numOfOverflows++;
 360:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <numOfOverflows>
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <numOfOverflows>
 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <Ultrasonic_Init>:
 * Return : the function Returns nothing
 */

void Ultrasonic_Init(void)
{
	SwICU_Init();
 376:	0e 94 22 01 	call	0x244	; 0x244 <SwICU_Init>
	Gpio_PinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,SET_OUT);
 37a:	4f ef       	ldi	r20, 0xFF	; 255
 37c:	60 e8       	ldi	r22, 0x80	; 128
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
	Gpio_PinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,SET_IN);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 38e:	08 95       	ret

00000390 <Ultrasonic_Trigger>:
 *	    for at least a 10 micro seconds and then pull it low.
 * Return : the function Returns nothing
 */
void Ultrasonic_Trigger(void)
{
	Gpio_PinWrite(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,HIGH);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	60 e8       	ldi	r22, 0x80	; 128
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
	SwDelay_us(10);
 39a:	6a e0       	ldi	r22, 0x0A	; 10
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SwDelay_us>
	Gpio_PinWrite(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,LOW);
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	60 e8       	ldi	r22, 0x80	; 128
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 4d 02 	call	0x49a	; 0x49a <Gpio_PinWrite>
 3b0:	08 95       	ret

000003b2 <Ultrasonic_CalculateDistance>:
 * Description : This function is used to Calculate the Distance by receiving the Ton from the ICU Unit
 *                           and then returning the Distance.
 * Return : the function Returns the Distance in centimeters.
 */
uint32 Ultrasonic_CalculateDistance(void)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	28 97       	sbiw	r28, 0x08	; 8
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
	uint32 theDistance;
	uint64 raising_time_ns;
	SwICU_Read(&raising_time_ns);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 2e 01 	call	0x25c	; 0x25c <SwICU_Read>
	theDistance = ( ( raising_time_ns / NANOSECONDS_FACTOR ) * SOUNDSPEED_FACTOR );
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	3a 81       	ldd	r19, Y+2	; 0x02
 3d2:	4b 81       	ldd	r20, Y+3	; 0x03
 3d4:	5c 81       	ldd	r21, Y+4	; 0x04
 3d6:	6d 81       	ldd	r22, Y+5	; 0x05
 3d8:	7e 81       	ldd	r23, Y+6	; 0x06
 3da:	8f 81       	ldd	r24, Y+7	; 0x07
 3dc:	98 85       	ldd	r25, Y+8	; 0x08
 3de:	0e 94 cb 05 	call	0xb96	; 0xb96 <__floatundisf>
 3e2:	28 e2       	ldi	r18, 0x28	; 40
 3e4:	3b e6       	ldi	r19, 0x6B	; 107
 3e6:	4e e6       	ldi	r20, 0x6E	; 110
 3e8:	5e e4       	ldi	r21, 0x4E	; 78
 3ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divsf3>
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	3c ef       	ldi	r19, 0xFC	; 252
 3f2:	45 e8       	ldi	r20, 0x85	; 133
 3f4:	56 e4       	ldi	r21, 0x46	; 70
 3f6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsf3>
 3fa:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixunssfsi>
	return theDistance;	
 3fe:	28 96       	adiw	r28, 0x08	; 8
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <main>:
/*                        Functions Definitions                         */
/************************************************************************/
int main(void)
{
	/* Initializing the car */
	Car_Init();
 410:	0e 94 49 00 	call	0x92	; 0x92 <Car_Init>
	
    while (1) 
    {
	/* Applying the Car moving logic */
		Car_Action();
 414:	0e 94 58 00 	call	0xb0	; 0xb0 <Car_Action>
 418:	fd cf       	rjmp	.-6      	; 0x414 <main+0x4>

0000041a <Gpio_PinDirection>:
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	a1 f0       	breq	.+40     	; 0x446 <Gpio_PinDirection+0x2c>
 41e:	28 f0       	brcs	.+10     	; 0x42a <Gpio_PinDirection+0x10>
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	f9 f0       	breq	.+62     	; 0x462 <Gpio_PinDirection+0x48>
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	59 f1       	breq	.+86     	; 0x47e <Gpio_PinDirection+0x64>
 428:	08 95       	ret
	{
		case MYPORTA :
		{
		switch(direction)
 42a:	44 23       	and	r20, r20
 42c:	19 f0       	breq	.+6      	; 0x434 <Gpio_PinDirection+0x1a>
 42e:	4f 3f       	cpi	r20, 0xFF	; 255
 430:	31 f0       	breq	.+12     	; 0x43e <Gpio_PinDirection+0x24>
 432:	08 95       	ret
		{
		case SET_IN : 
		DDR_A &= ~(pins);
 434:	8a b3       	in	r24, 0x1a	; 26
 436:	60 95       	com	r22
 438:	68 23       	and	r22, r24
 43a:	6a bb       	out	0x1a, r22	; 26
		break;
 43c:	08 95       	ret
		case SET_OUT : 
		DDR_A |= (pins);
 43e:	8a b3       	in	r24, 0x1a	; 26
 440:	68 2b       	or	r22, r24
 442:	6a bb       	out	0x1a, r22	; 26
		break;
 444:	08 95       	ret
		}
		break;
		
		case MYPORTB :
		{
		switch(direction)
 446:	44 23       	and	r20, r20
 448:	19 f0       	breq	.+6      	; 0x450 <Gpio_PinDirection+0x36>
 44a:	4f 3f       	cpi	r20, 0xFF	; 255
 44c:	31 f0       	breq	.+12     	; 0x45a <Gpio_PinDirection+0x40>
 44e:	08 95       	ret
		{
		case SET_IN :
			DDR_B &= ~(pins);
 450:	87 b3       	in	r24, 0x17	; 23
 452:	60 95       	com	r22
 454:	68 23       	and	r22, r24
 456:	67 bb       	out	0x17, r22	; 23
			break;
 458:	08 95       	ret
		case SET_OUT :
			DDR_B |= (pins);
 45a:	87 b3       	in	r24, 0x17	; 23
 45c:	68 2b       	or	r22, r24
 45e:	67 bb       	out	0x17, r22	; 23
			break;
 460:	08 95       	ret
		}
		}
		break;
		case MYPORTC :
		{
			switch(direction)
 462:	44 23       	and	r20, r20
 464:	19 f0       	breq	.+6      	; 0x46c <Gpio_PinDirection+0x52>
 466:	4f 3f       	cpi	r20, 0xFF	; 255
 468:	31 f0       	breq	.+12     	; 0x476 <Gpio_PinDirection+0x5c>
 46a:	08 95       	ret
			{
				case SET_IN :
				DDR_C &= ~(pins);
 46c:	84 b3       	in	r24, 0x14	; 20
 46e:	60 95       	com	r22
 470:	68 23       	and	r22, r24
 472:	64 bb       	out	0x14, r22	; 20
				break;
 474:	08 95       	ret
				case SET_OUT :
				DDR_C |= (pins);
 476:	84 b3       	in	r24, 0x14	; 20
 478:	68 2b       	or	r22, r24
 47a:	64 bb       	out	0x14, r22	; 20
				break;
 47c:	08 95       	ret
			}
		}
		break;
		case MYPORTD :
		{
			switch(direction)
 47e:	44 23       	and	r20, r20
 480:	19 f0       	breq	.+6      	; 0x488 <Gpio_PinDirection+0x6e>
 482:	4f 3f       	cpi	r20, 0xFF	; 255
 484:	31 f0       	breq	.+12     	; 0x492 <Gpio_PinDirection+0x78>
 486:	08 95       	ret
			{
				case SET_IN :
				DDR_D &= ~(pins);
 488:	81 b3       	in	r24, 0x11	; 17
 48a:	60 95       	com	r22
 48c:	68 23       	and	r22, r24
 48e:	61 bb       	out	0x11, r22	; 17
				break;
 490:	08 95       	ret
				case SET_OUT :
				DDR_D |= (pins);
 492:	81 b3       	in	r24, 0x11	; 17
 494:	68 2b       	or	r22, r24
 496:	61 bb       	out	0x11, r22	; 17
 498:	08 95       	ret

0000049a <Gpio_PinWrite>:
 * @param value : The value of the PIN >> {HIGH , LOW}
 * Return : void
 */
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
 49a:	44 23       	and	r20, r20
 49c:	d1 f0       	breq	.+52     	; 0x4d2 <Gpio_PinWrite+0x38>
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	99 f5       	brne	.+102    	; 0x508 <Gpio_PinWrite+0x6e>
	{
		case HIGH:
			switch(port)
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	51 f0       	breq	.+20     	; 0x4ba <Gpio_PinWrite+0x20>
 4a6:	28 f0       	brcs	.+10     	; 0x4b2 <Gpio_PinWrite+0x18>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <Gpio_PinWrite+0x28>
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	69 f0       	breq	.+26     	; 0x4ca <Gpio_PinWrite+0x30>
 4b0:	08 95       	ret
			{
					case MYPORTA :
						PORT_A |= (pins);
 4b2:	8b b3       	in	r24, 0x1b	; 27
 4b4:	68 2b       	or	r22, r24
 4b6:	6b bb       	out	0x1b, r22	; 27
						break;
 4b8:	08 95       	ret
					case MYPORTB :
						PORT_B |= (pins);
 4ba:	88 b3       	in	r24, 0x18	; 24
 4bc:	68 2b       	or	r22, r24
 4be:	68 bb       	out	0x18, r22	; 24
						break;
 4c0:	08 95       	ret
					case MYPORTC :
						PORT_C |= (pins);
 4c2:	85 b3       	in	r24, 0x15	; 21
 4c4:	68 2b       	or	r22, r24
 4c6:	65 bb       	out	0x15, r22	; 21
						break;
 4c8:	08 95       	ret
					case MYPORTD :
						PORT_D |= (pins);
 4ca:	82 b3       	in	r24, 0x12	; 18
 4cc:	68 2b       	or	r22, r24
 4ce:	62 bb       	out	0x12, r22	; 18
						break;
 4d0:	08 95       	ret
		}
		break;
		
		case LOW : 
		switch(port)
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	59 f0       	breq	.+22     	; 0x4ec <Gpio_PinWrite+0x52>
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <Gpio_PinWrite+0x48>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	69 f0       	breq	.+26     	; 0x4f6 <Gpio_PinWrite+0x5c>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	81 f0       	breq	.+32     	; 0x500 <Gpio_PinWrite+0x66>
 4e0:	08 95       	ret
		{
			case MYPORTA :
			PORT_A &= ~(pins);
 4e2:	8b b3       	in	r24, 0x1b	; 27
 4e4:	60 95       	com	r22
 4e6:	68 23       	and	r22, r24
 4e8:	6b bb       	out	0x1b, r22	; 27
			break;
 4ea:	08 95       	ret
			case MYPORTB :
			PORT_B &= ~(pins);
 4ec:	88 b3       	in	r24, 0x18	; 24
 4ee:	60 95       	com	r22
 4f0:	68 23       	and	r22, r24
 4f2:	68 bb       	out	0x18, r22	; 24
			break;
 4f4:	08 95       	ret
			case MYPORTC :
			PORT_C &= ~(pins);
 4f6:	85 b3       	in	r24, 0x15	; 21
 4f8:	60 95       	com	r22
 4fa:	68 23       	and	r22, r24
 4fc:	65 bb       	out	0x15, r22	; 21
			break;
 4fe:	08 95       	ret
			case MYPORTD :
			PORT_D &= ~(pins);
 500:	82 b3       	in	r24, 0x12	; 18
 502:	60 95       	com	r22
 504:	68 23       	and	r22, r24
 506:	62 bb       	out	0x12, r22	; 18
 508:	08 95       	ret

0000050a <Interrupts_On>:
 * Description : This function is used to turn Off the global interrupt mask
 * Return : the function Returns nothing
 */
void interrupts_Off(void)
{    
	CLR_BIT(SREG,GIE);
 50a:	8f b7       	in	r24, 0x3f	; 63
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	8f bf       	out	0x3f, r24	; 63
 510:	08 95       	ret

00000512 <Interrupts_ExtInt_Init>:
					Note : INT2 only works in the edge mode [FALLING_EDGE,RISING_EDGE]
 * Return : the function Returns nothing
 */
void Interrupts_ExtInt_Init(uint8 extInt , uint8 cfg)
{	
	switch(extInt)
 512:	86 30       	cpi	r24, 0x06	; 6
 514:	31 f0       	breq	.+12     	; 0x522 <Interrupts_ExtInt_Init+0x10>
 516:	87 30       	cpi	r24, 0x07	; 7
 518:	a1 f1       	breq	.+104    	; 0x582 <Interrupts_ExtInt_Init+0x70>
 51a:	85 30       	cpi	r24, 0x05	; 5
 51c:	09 f0       	breq	.+2      	; 0x520 <Interrupts_ExtInt_Init+0xe>
 51e:	64 c0       	rjmp	.+200    	; 0x5e8 <Interrupts_ExtInt_Init+0xd6>
 520:	60 c0       	rjmp	.+192    	; 0x5e2 <Interrupts_ExtInt_Init+0xd0>
	{
		case INT0 : 
		switch(cfg)
 522:	61 30       	cpi	r22, 0x01	; 1
 524:	81 f0       	breq	.+32     	; 0x546 <Interrupts_ExtInt_Init+0x34>
 526:	28 f0       	brcs	.+10     	; 0x532 <Interrupts_ExtInt_Init+0x20>
 528:	62 30       	cpi	r22, 0x02	; 2
 52a:	b9 f0       	breq	.+46     	; 0x55a <Interrupts_ExtInt_Init+0x48>
 52c:	63 30       	cpi	r22, 0x03	; 3
 52e:	f9 f0       	breq	.+62     	; 0x56e <Interrupts_ExtInt_Init+0x5c>
 530:	08 95       	ret
		{
		
		case LOW_LEVEL :
		SET_BIT(GICR,INT0);
 532:	8b b7       	in	r24, 0x3b	; 59
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8b bf       	out	0x3b, r24	; 59
		CLR_BIT(MCUCR,ISC00);
 538:	85 b7       	in	r24, 0x35	; 53
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC01);
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	8d 7f       	andi	r24, 0xFD	; 253
 542:	85 bf       	out	0x35, r24	; 53
		break;
 544:	08 95       	ret
		
		case ANY_CHANGE :
		SET_BIT(GICR,INT0);
 546:	8b b7       	in	r24, 0x3b	; 59
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC00);
 54c:	85 b7       	in	r24, 0x35	; 53
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC01);
 552:	85 b7       	in	r24, 0x35	; 53
 554:	8d 7f       	andi	r24, 0xFD	; 253
 556:	85 bf       	out	0x35, r24	; 53
		break;
 558:	08 95       	ret
		
		case FALLING_EDGE :
		SET_BIT(GICR,INT0);
 55a:	8b b7       	in	r24, 0x3b	; 59
 55c:	80 64       	ori	r24, 0x40	; 64
 55e:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC01);
 560:	85 b7       	in	r24, 0x35	; 53
 562:	82 60       	ori	r24, 0x02	; 2
 564:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC00);
 566:	85 b7       	in	r24, 0x35	; 53
 568:	8e 7f       	andi	r24, 0xFE	; 254
 56a:	85 bf       	out	0x35, r24	; 53
		break;
 56c:	08 95       	ret
		
		case RISING_EDGE :
		SET_BIT(GICR,INT0);
 56e:	8b b7       	in	r24, 0x3b	; 59
 570:	80 64       	ori	r24, 0x40	; 64
 572:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC01);
 574:	85 b7       	in	r24, 0x35	; 53
 576:	82 60       	ori	r24, 0x02	; 2
 578:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC00);
 57a:	85 b7       	in	r24, 0x35	; 53
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	85 bf       	out	0x35, r24	; 53
		break;
 580:	08 95       	ret
		}
		
		break;
		
		case INT1 :
		switch(cfg)
 582:	61 30       	cpi	r22, 0x01	; 1
 584:	81 f0       	breq	.+32     	; 0x5a6 <Interrupts_ExtInt_Init+0x94>
 586:	28 f0       	brcs	.+10     	; 0x592 <Interrupts_ExtInt_Init+0x80>
 588:	62 30       	cpi	r22, 0x02	; 2
 58a:	b9 f0       	breq	.+46     	; 0x5ba <Interrupts_ExtInt_Init+0xa8>
 58c:	63 30       	cpi	r22, 0x03	; 3
 58e:	f9 f0       	breq	.+62     	; 0x5ce <Interrupts_ExtInt_Init+0xbc>
 590:	08 95       	ret
		{
		
		case LOW_LEVEL :
		SET_BIT(GICR,INT1);
 592:	8b b7       	in	r24, 0x3b	; 59
 594:	80 68       	ori	r24, 0x80	; 128
 596:	8b bf       	out	0x3b, r24	; 59
		CLR_BIT(MCUCR,ISC10);
 598:	85 b7       	in	r24, 0x35	; 53
 59a:	8b 7f       	andi	r24, 0xFB	; 251
 59c:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC11);
 59e:	85 b7       	in	r24, 0x35	; 53
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	85 bf       	out	0x35, r24	; 53
		break;
 5a4:	08 95       	ret
		
		case ANY_CHANGE :
		SET_BIT(GICR,INT1);
 5a6:	8b b7       	in	r24, 0x3b	; 59
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC10);
 5ac:	85 b7       	in	r24, 0x35	; 53
 5ae:	84 60       	ori	r24, 0x04	; 4
 5b0:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC11);
 5b2:	85 b7       	in	r24, 0x35	; 53
 5b4:	87 7f       	andi	r24, 0xF7	; 247
 5b6:	85 bf       	out	0x35, r24	; 53
		break;
 5b8:	08 95       	ret
		
		case FALLING_EDGE :
		SET_BIT(GICR,INT1);
 5ba:	8b b7       	in	r24, 0x3b	; 59
 5bc:	80 68       	ori	r24, 0x80	; 128
 5be:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC11);
 5c0:	85 b7       	in	r24, 0x35	; 53
 5c2:	88 60       	ori	r24, 0x08	; 8
 5c4:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC10);
 5c6:	85 b7       	in	r24, 0x35	; 53
 5c8:	8b 7f       	andi	r24, 0xFB	; 251
 5ca:	85 bf       	out	0x35, r24	; 53
		break;
 5cc:	08 95       	ret
		
		case RISING_EDGE :
		SET_BIT(GICR,INT1);
 5ce:	8b b7       	in	r24, 0x3b	; 59
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCR,ISC11);
 5d4:	85 b7       	in	r24, 0x35	; 53
 5d6:	88 60       	ori	r24, 0x08	; 8
 5d8:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC10);
 5da:	85 b7       	in	r24, 0x35	; 53
 5dc:	84 60       	ori	r24, 0x04	; 4
 5de:	85 bf       	out	0x35, r24	; 53
		break;
 5e0:	08 95       	ret
		
		}
		break;
		
		case INT2 :
		SET_BIT(GICR,INT2);
 5e2:	8b b7       	in	r24, 0x3b	; 59
 5e4:	80 62       	ori	r24, 0x20	; 32
 5e6:	8b bf       	out	0x3b, r24	; 59
 5e8:	08 95       	ret

000005ea <PWM_Init>:
 * @param dutyCycle the duty cycle of the PWM in percentage
 * @param freq the frequency of the PWM in Hz
 */

void PWM_Init( uint8 ch_no){
	switch(ch_no)
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	49 f0       	breq	.+18     	; 0x600 <PWM_Init+0x16>
 5ee:	18 f0       	brcs	.+6      	; 0x5f6 <PWM_Init+0xc>
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	59 f0       	breq	.+22     	; 0x60a <PWM_Init+0x20>
 5f4:	08 95       	ret
	{
		case TIMER0:
		Timers_Init(&timer0_cfg_s);
 5f6:	82 e7       	ldi	r24, 0x72	; 114
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <Timers_Init>
		break;
 5fe:	08 95       	ret
		case TIMER1:
		Timers_Init(&timer1_cfg_s);
 600:	89 e6       	ldi	r24, 0x69	; 105
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 de 03 	call	0x7bc	; 0x7bc <Timers_Init>
		break;
 608:	08 95       	ret
		case TIMER2:
		Timers_Init(&timer2_cfg_s);
 60a:	80 e6       	ldi	r24, 0x60	; 96
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 de 03 	call	0x7bc	; 0x7bc <Timers_Init>
 612:	08 95       	ret

00000614 <PWM_PhaseCorrect>:
 * Description: PWM_PhaseCorrect is a function to initiate a PWM on a GPIO pin OC1 
 * @param dutyCycle the duty cycle of the PWM in percentage
 * @param freq the frequency of the PWM in Hz
 */

void PWM_PhaseCorrect( uint8 dutycycle , uint16 freq){
 614:	cf 93       	push	r28
 616:	c8 2f       	mov	r28, r24
	uint16 TOP_Value;
	uint16 Compare_Value;
	TOP_Value = F_CPU / ( 2 * freq * Gv_PrescallerTimer1_AbsoluteValue);
 618:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 61c:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	86 9f       	mul	r24, r22
 626:	90 01       	movw	r18, r0
 628:	87 9f       	mul	r24, r23
 62a:	30 0d       	add	r19, r0
 62c:	96 9f       	mul	r25, r22
 62e:	30 0d       	add	r19, r0
 630:	11 24       	eor	r1, r1
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	72 e1       	ldi	r23, 0x12	; 18
 63a:	8a e7       	ldi	r24, 0x7A	; 122
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 642:	52 2f       	mov	r21, r18
 644:	43 2f       	mov	r20, r19
 646:	82 2f       	mov	r24, r18
 648:	93 2f       	mov	r25, r19
	Compare_Value = (TOP_Value*dutycycle)/DUTY_CYCLE_PERCENTAGE_FACTOR;
 64a:	c8 9f       	mul	r28, r24
 64c:	90 01       	movw	r18, r0
 64e:	c9 9f       	mul	r28, r25
 650:	30 0d       	add	r19, r0
 652:	11 24       	eor	r1, r1
 654:	36 95       	lsr	r19
 656:	27 95       	ror	r18
 658:	36 95       	lsr	r19
 65a:	27 95       	ror	r18
 65c:	ab e7       	ldi	r26, 0x7B	; 123
 65e:	b4 e1       	ldi	r27, 0x14	; 20
 660:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__umulhisi3>
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
	ICR1L  = (uint8)(TOP_Value);
 668:	56 bd       	out	0x26, r21	; 38
	ICR1H  = (uint8)(TOP_Value>>8);
 66a:	47 bd       	out	0x27, r20	; 39
	OCR1AL = (uint8)(Compare_Value);
 66c:	8a bd       	out	0x2a, r24	; 42
	OCR1AH = (uint8)(Compare_Value>>8);
 66e:	9b bd       	out	0x2b, r25	; 43
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <Timers_SetCounter>:
			break;
			case  T2_PRESCALER_1024 :
			Gv_PrescallerTimer2_AbsoluteValue= 1024;
			break;
		}
}
 674:	8f 92       	push	r8
 676:	9f 92       	push	r9
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	89 f1       	breq	.+98     	; 0x6ea <Timers_SetCounter+0x76>
 688:	20 f0       	brcs	.+8      	; 0x692 <Timers_SetCounter+0x1e>
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	09 f4       	brne	.+2      	; 0x690 <Timers_SetCounter+0x1c>
 68e:	5b c0       	rjmp	.+182    	; 0x746 <Timers_SetCounter+0xd2>
 690:	85 c0       	rjmp	.+266    	; 0x79c <Timers_SetCounter+0x128>
 692:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 696:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 69a:	80 90 89 00 	lds	r8, 0x0089	; 0x800089 <Gv_F_CPU>
 69e:	90 90 8a 00 	lds	r9, 0x008A	; 0x80008a <Gv_F_CPU+0x1>
 6a2:	a0 90 8b 00 	lds	r10, 0x008B	; 0x80008b <Gv_F_CPU+0x2>
 6a6:	b0 90 8c 00 	lds	r11, 0x008C	; 0x80008c <Gv_F_CPU+0x3>
 6aa:	6b 01       	movw	r12, r22
 6ac:	e1 2c       	mov	r14, r1
 6ae:	f1 2c       	mov	r15, r1
 6b0:	20 e4       	ldi	r18, 0x40	; 64
 6b2:	32 e4       	ldi	r19, 0x42	; 66
 6b4:	4f e0       	ldi	r20, 0x0F	; 15
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__muluhisi3>
 6bc:	a5 01       	movw	r20, r10
 6be:	94 01       	movw	r18, r8
 6c0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 6c4:	c7 01       	movw	r24, r14
 6c6:	b6 01       	movw	r22, r12
 6c8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 6cc:	21 30       	cpi	r18, 0x01	; 1
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	38 07       	cpc	r19, r24
 6d2:	41 05       	cpc	r20, r1
 6d4:	51 05       	cpc	r21, r1
 6d6:	08 f0       	brcs	.+2      	; 0x6da <Timers_SetCounter+0x66>
 6d8:	63 c0       	rjmp	.+198    	; 0x7a0 <Timers_SetCounter+0x12c>
 6da:	21 95       	neg	r18
 6dc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <Gv_Count>
 6e0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Gv_Count>
 6e4:	82 bf       	out	0x32, r24	; 50
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	60 c0       	rjmp	.+192    	; 0x7aa <Timers_SetCounter+0x136>
 6ea:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 6ee:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 6f2:	80 90 89 00 	lds	r8, 0x0089	; 0x800089 <Gv_F_CPU>
 6f6:	90 90 8a 00 	lds	r9, 0x008A	; 0x80008a <Gv_F_CPU+0x1>
 6fa:	a0 90 8b 00 	lds	r10, 0x008B	; 0x80008b <Gv_F_CPU+0x2>
 6fe:	b0 90 8c 00 	lds	r11, 0x008C	; 0x80008c <Gv_F_CPU+0x3>
 702:	6b 01       	movw	r12, r22
 704:	e1 2c       	mov	r14, r1
 706:	f1 2c       	mov	r15, r1
 708:	20 e4       	ldi	r18, 0x40	; 64
 70a:	32 e4       	ldi	r19, 0x42	; 66
 70c:	4f e0       	ldi	r20, 0x0F	; 15
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__muluhisi3>
 714:	a5 01       	movw	r20, r10
 716:	94 01       	movw	r18, r8
 718:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 71c:	c7 01       	movw	r24, r14
 71e:	b6 01       	movw	r22, r12
 720:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 724:	21 30       	cpi	r18, 0x01	; 1
 726:	31 05       	cpc	r19, r1
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	48 07       	cpc	r20, r24
 72c:	51 05       	cpc	r21, r1
 72e:	d0 f5       	brcc	.+116    	; 0x7a4 <Timers_SetCounter+0x130>
 730:	21 95       	neg	r18
 732:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <Gv_Count>
 736:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Gv_Count>
 73a:	8c bd       	out	0x2c, r24	; 44
 73c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Gv_Count>
 740:	1d bc       	out	0x2d, r1	; 45
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	32 c0       	rjmp	.+100    	; 0x7aa <Timers_SetCounter+0x136>
 746:	a0 91 8d 00 	lds	r26, 0x008D	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 74a:	b0 91 8e 00 	lds	r27, 0x008E	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 74e:	80 90 89 00 	lds	r8, 0x0089	; 0x800089 <Gv_F_CPU>
 752:	90 90 8a 00 	lds	r9, 0x008A	; 0x80008a <Gv_F_CPU+0x1>
 756:	a0 90 8b 00 	lds	r10, 0x008B	; 0x80008b <Gv_F_CPU+0x2>
 75a:	b0 90 8c 00 	lds	r11, 0x008C	; 0x80008c <Gv_F_CPU+0x3>
 75e:	6b 01       	movw	r12, r22
 760:	e1 2c       	mov	r14, r1
 762:	f1 2c       	mov	r15, r1
 764:	20 e4       	ldi	r18, 0x40	; 64
 766:	32 e4       	ldi	r19, 0x42	; 66
 768:	4f e0       	ldi	r20, 0x0F	; 15
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__muluhisi3>
 770:	a5 01       	movw	r20, r10
 772:	94 01       	movw	r18, r8
 774:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 778:	c7 01       	movw	r24, r14
 77a:	b6 01       	movw	r22, r12
 77c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodsi4>
 780:	21 30       	cpi	r18, 0x01	; 1
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	38 07       	cpc	r19, r24
 786:	41 05       	cpc	r20, r1
 788:	51 05       	cpc	r21, r1
 78a:	70 f4       	brcc	.+28     	; 0x7a8 <Timers_SetCounter+0x134>
 78c:	21 95       	neg	r18
 78e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <Gv_Count>
 792:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Gv_Count>
 796:	84 bd       	out	0x24, r24	; 36
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <Timers_SetCounter+0x136>
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <Timers_SetCounter+0x136>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <Timers_SetCounter+0x136>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <Timers_SetCounter+0x136>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	ff 90       	pop	r15
 7ac:	ef 90       	pop	r14
 7ae:	df 90       	pop	r13
 7b0:	cf 90       	pop	r12
 7b2:	bf 90       	pop	r11
 7b4:	af 90       	pop	r10
 7b6:	9f 90       	pop	r9
 7b8:	8f 90       	pop	r8
 7ba:	08 95       	ret

000007bc <Timers_Init>:
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ec 01       	movw	r28, r24
 7c4:	8d 81       	ldd	r24, Y+5	; 0x05
 7c6:	9e 81       	ldd	r25, Y+6	; 0x06
 7c8:	af 81       	ldd	r26, Y+7	; 0x07
 7ca:	b8 85       	ldd	r27, Y+8	; 0x08
 7cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Gv_F_CPU>
 7d0:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <Gv_F_CPU+0x1>
 7d4:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <Gv_F_CPU+0x2>
 7d8:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <Gv_F_CPU+0x3>
 7dc:	88 81       	ld	r24, Y
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <Timers_Init+0x28>
 7e2:	4b c0       	rjmp	.+150    	; 0x87a <__stack+0x1b>
 7e4:	20 f0       	brcs	.+8      	; 0x7ee <Timers_Init+0x32>
 7e6:	82 30       	cpi	r24, 0x02	; 2
 7e8:	09 f4       	brne	.+2      	; 0x7ec <Timers_Init+0x30>
 7ea:	97 c0       	rjmp	.+302    	; 0x91a <__stack+0xbb>
 7ec:	dd c0       	rjmp	.+442    	; 0x9a8 <__stack+0x149>
 7ee:	93 b7       	in	r25, 0x33	; 51
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	89 2b       	or	r24, r25
 7f4:	83 bf       	out	0x33, r24	; 51
 7f6:	99 b7       	in	r25, 0x39	; 57
 7f8:	8c 81       	ldd	r24, Y+4	; 0x04
 7fa:	89 2b       	or	r24, r25
 7fc:	89 bf       	out	0x39, r24	; 57
 7fe:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Gv_PrescallerTimer0_Mask>
 802:	82 30       	cpi	r24, 0x02	; 2
 804:	d1 f0       	breq	.+52     	; 0x83a <Timers_Init+0x7e>
 806:	28 f4       	brcc	.+10     	; 0x812 <Timers_Init+0x56>
 808:	88 23       	and	r24, r24
 80a:	49 f0       	breq	.+18     	; 0x81e <Timers_Init+0x62>
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	69 f0       	breq	.+26     	; 0x82a <Timers_Init+0x6e>
 810:	cd c0       	rjmp	.+410    	; 0x9ac <__stack+0x14d>
 812:	84 30       	cpi	r24, 0x04	; 4
 814:	11 f1       	breq	.+68     	; 0x85a <Timers_Init+0x9e>
 816:	c8 f0       	brcs	.+50     	; 0x84a <Timers_Init+0x8e>
 818:	85 30       	cpi	r24, 0x05	; 5
 81a:	39 f1       	breq	.+78     	; 0x86a <__stack+0xb>
 81c:	c7 c0       	rjmp	.+398    	; 0x9ac <__stack+0x14d>
 81e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 822:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 826:	11 e0       	ldi	r17, 0x01	; 1
 828:	c6 c0       	rjmp	.+396    	; 0x9b6 <__stack+0x157>
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 832:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 836:	11 e0       	ldi	r17, 0x01	; 1
 838:	be c0       	rjmp	.+380    	; 0x9b6 <__stack+0x157>
 83a:	88 e0       	ldi	r24, 0x08	; 8
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 842:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 846:	11 e0       	ldi	r17, 0x01	; 1
 848:	b6 c0       	rjmp	.+364    	; 0x9b6 <__stack+0x157>
 84a:	80 e4       	ldi	r24, 0x40	; 64
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 852:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 856:	11 e0       	ldi	r17, 0x01	; 1
 858:	ae c0       	rjmp	.+348    	; 0x9b6 <__stack+0x157>
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 862:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 866:	11 e0       	ldi	r17, 0x01	; 1
 868:	a6 c0       	rjmp	.+332    	; 0x9b6 <__stack+0x157>
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	94 e0       	ldi	r25, 0x04	; 4
 86e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
 872:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Gv_PrescallerTimer0_AbsoluteValue>
 876:	11 e0       	ldi	r17, 0x01	; 1
 878:	9e c0       	rjmp	.+316    	; 0x9b6 <__stack+0x157>
 87a:	9f b5       	in	r25, 0x2f	; 47
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	83 70       	andi	r24, 0x03	; 3
 880:	89 2b       	or	r24, r25
 882:	8f bd       	out	0x2f, r24	; 47
 884:	9e b5       	in	r25, 0x2e	; 46
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	88 71       	andi	r24, 0x18	; 24
 88a:	89 2b       	or	r24, r25
 88c:	8e bd       	out	0x2e, r24	; 46
 88e:	8f b5       	in	r24, 0x2f	; 47
 890:	80 68       	ori	r24, 0x80	; 128
 892:	8f bd       	out	0x2f, r24	; 47
 894:	4f ef       	ldi	r20, 0xFF	; 255
 896:	60 e2       	ldi	r22, 0x20	; 32
 898:	83 e0       	ldi	r24, 0x03	; 3
 89a:	0e 94 0d 02 	call	0x41a	; 0x41a <Gpio_PinDirection>
 89e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Gv_PrescallerTimer1_Mask>
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	d1 f0       	breq	.+52     	; 0x8da <__stack+0x7b>
 8a6:	28 f4       	brcc	.+10     	; 0x8b2 <__stack+0x53>
 8a8:	88 23       	and	r24, r24
 8aa:	49 f0       	breq	.+18     	; 0x8be <__stack+0x5f>
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	69 f0       	breq	.+26     	; 0x8ca <__stack+0x6b>
 8b0:	7f c0       	rjmp	.+254    	; 0x9b0 <__stack+0x151>
 8b2:	84 30       	cpi	r24, 0x04	; 4
 8b4:	11 f1       	breq	.+68     	; 0x8fa <__stack+0x9b>
 8b6:	c8 f0       	brcs	.+50     	; 0x8ea <__stack+0x8b>
 8b8:	85 30       	cpi	r24, 0x05	; 5
 8ba:	39 f1       	breq	.+78     	; 0x90a <__stack+0xab>
 8bc:	79 c0       	rjmp	.+242    	; 0x9b0 <__stack+0x151>
 8be:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 8c2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 8c6:	11 e0       	ldi	r17, 0x01	; 1
 8c8:	76 c0       	rjmp	.+236    	; 0x9b6 <__stack+0x157>
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 8d2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 8d6:	11 e0       	ldi	r17, 0x01	; 1
 8d8:	6e c0       	rjmp	.+220    	; 0x9b6 <__stack+0x157>
 8da:	88 e0       	ldi	r24, 0x08	; 8
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 8e2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 8e6:	11 e0       	ldi	r17, 0x01	; 1
 8e8:	66 c0       	rjmp	.+204    	; 0x9b6 <__stack+0x157>
 8ea:	80 e4       	ldi	r24, 0x40	; 64
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 8f2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 8f6:	11 e0       	ldi	r17, 0x01	; 1
 8f8:	5e c0       	rjmp	.+188    	; 0x9b6 <__stack+0x157>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	91 e0       	ldi	r25, 0x01	; 1
 8fe:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 902:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 906:	11 e0       	ldi	r17, 0x01	; 1
 908:	56 c0       	rjmp	.+172    	; 0x9b6 <__stack+0x157>
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	94 e0       	ldi	r25, 0x04	; 4
 90e:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
 912:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Gv_PrescallerTimer1_AbsoluteValue>
 916:	11 e0       	ldi	r17, 0x01	; 1
 918:	4e c0       	rjmp	.+156    	; 0x9b6 <__stack+0x157>
 91a:	95 b5       	in	r25, 0x25	; 37
 91c:	89 81       	ldd	r24, Y+1	; 0x01
 91e:	89 2b       	or	r24, r25
 920:	85 bd       	out	0x25, r24	; 37
 922:	99 b7       	in	r25, 0x39	; 57
 924:	8c 81       	ldd	r24, Y+4	; 0x04
 926:	89 2b       	or	r24, r25
 928:	89 bf       	out	0x39, r24	; 57
 92a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Gv_PrescallerTimer2_Mask>
 92e:	82 30       	cpi	r24, 0x02	; 2
 930:	d9 f0       	breq	.+54     	; 0x968 <__stack+0x109>
 932:	28 f4       	brcc	.+10     	; 0x93e <__stack+0xdf>
 934:	88 23       	and	r24, r24
 936:	51 f0       	breq	.+20     	; 0x94c <__stack+0xed>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	71 f0       	breq	.+28     	; 0x958 <__stack+0xf9>
 93c:	3b c0       	rjmp	.+118    	; 0x9b4 <__stack+0x155>
 93e:	86 30       	cpi	r24, 0x06	; 6
 940:	19 f1       	breq	.+70     	; 0x988 <__stack+0x129>
 942:	87 30       	cpi	r24, 0x07	; 7
 944:	49 f1       	breq	.+82     	; 0x998 <__stack+0x139>
 946:	84 30       	cpi	r24, 0x04	; 4
 948:	a9 f5       	brne	.+106    	; 0x9b4 <__stack+0x155>
 94a:	16 c0       	rjmp	.+44     	; 0x978 <__stack+0x119>
 94c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 950:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 954:	11 e0       	ldi	r17, 0x01	; 1
 956:	2f c0       	rjmp	.+94     	; 0x9b6 <__stack+0x157>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 960:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 964:	11 e0       	ldi	r17, 0x01	; 1
 966:	27 c0       	rjmp	.+78     	; 0x9b6 <__stack+0x157>
 968:	88 e0       	ldi	r24, 0x08	; 8
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 970:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 974:	11 e0       	ldi	r17, 0x01	; 1
 976:	1f c0       	rjmp	.+62     	; 0x9b6 <__stack+0x157>
 978:	80 e4       	ldi	r24, 0x40	; 64
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 980:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 984:	11 e0       	ldi	r17, 0x01	; 1
 986:	17 c0       	rjmp	.+46     	; 0x9b6 <__stack+0x157>
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 990:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 994:	11 e0       	ldi	r17, 0x01	; 1
 996:	0f c0       	rjmp	.+30     	; 0x9b6 <__stack+0x157>
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	94 e0       	ldi	r25, 0x04	; 4
 99c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
 9a0:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Gv_PrescallerTimer2_AbsoluteValue>
 9a4:	11 e0       	ldi	r17, 0x01	; 1
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0x157>
 9a8:	10 e0       	ldi	r17, 0x00	; 0
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__stack+0x157>
 9ac:	11 e0       	ldi	r17, 0x01	; 1
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0x157>
 9b0:	11 e0       	ldi	r17, 0x01	; 1
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__stack+0x157>
 9b4:	11 e0       	ldi	r17, 0x01	; 1
 9b6:	6a 81       	ldd	r22, Y+2	; 0x02
 9b8:	7b 81       	ldd	r23, Y+3	; 0x03
 9ba:	88 81       	ld	r24, Y
 9bc:	0e 94 3a 03 	call	0x674	; 0x674 <Timers_SetCounter>
 9c0:	81 2f       	mov	r24, r17
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	08 95       	ret

000009ca <Timers_timer1_Start>:
 9ca:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <Gv_PrescallerTimer1_Mask>
 9ce:	8e b5       	in	r24, 0x2e	; 46
 9d0:	89 2b       	or	r24, r25
 9d2:	8e bd       	out	0x2e, r24	; 46
 9d4:	08 95       	ret

000009d6 <Timers_timer1_Stop>:
 9d6:	8e b5       	in	r24, 0x2e	; 46
 9d8:	88 7f       	andi	r24, 0xF8	; 248
 9da:	8e bd       	out	0x2e, r24	; 46
 9dc:	08 95       	ret

000009de <Timers_timer2_Set>:
 * @param value the value to be set with no more than 255
 */

void Timers_timer2_Set(uint8 value)
{
	TCNT2 = value;
 9de:	84 bd       	out	0x24, r24	; 36
 9e0:	08 95       	ret

000009e2 <Timers_timer2_Read>:
 * @return return the value
 */

uint8 Timers_timer2_Read(void)
{
	return TCNT2;
 9e2:	84 b5       	in	r24, 0x24	; 36
}
 9e4:	08 95       	ret

000009e6 <Timers_timer2_Start>:
 * Description: start the counting from the moment of this function call
  * @param value the value to be set in the prescaller pins in the TCCR2 Reg
 */
void Timers_timer2_Start(void)
{
		TCCR2 |= Gv_PrescallerTimer2_Mask;
 9e6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Gv_PrescallerTimer2_Mask>
 9ea:	85 b5       	in	r24, 0x25	; 37
 9ec:	89 2b       	or	r24, r25
 9ee:	85 bd       	out	0x25, r24	; 37
 9f0:	08 95       	ret

000009f2 <SwDelay_ms>:
/**
 * Description: Function to make a software Delay in the Melli seconds 
 * @param NoOfMilleSeconds the number of  Melli seconds to delay
 */
void SwDelay_ms(uint32 NoOfMilleSeconds)
{
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
	sint32 counter;
	counter = NoOfMilleSeconds * (F_CPU / SECONDS_TO_MILLISECONSD_FACTOR);
 9f6:	a0 e4       	ldi	r26, 0x40	; 64
 9f8:	bf e1       	ldi	r27, 0x1F	; 31
 9fa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__muluhisi3>
	while(counter > FALSE)
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	19 06       	cpc	r1, r25
 a06:	4c f4       	brge	.+18     	; 0xa1a <SwDelay_ms+0x28>
	{
			counter =  counter - CYCLE_MELLI_DELAY_FACTOR;
 a08:	69 50       	subi	r22, 0x09	; 9
 a0a:	71 09       	sbc	r23, r1
 a0c:	81 09       	sbc	r24, r1
 a0e:	91 09       	sbc	r25, r1
 */
void SwDelay_ms(uint32 NoOfMilleSeconds)
{
	sint32 counter;
	counter = NoOfMilleSeconds * (F_CPU / SECONDS_TO_MILLISECONSD_FACTOR);
	while(counter > FALSE)
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	19 06       	cpc	r1, r25
 a18:	bc f3       	brlt	.-18     	; 0xa08 <SwDelay_ms+0x16>
 a1a:	08 95       	ret

00000a1c <SwDelay_us>:
 * @param NoOfMicroeSeconds the number of Micro Seconds to delay
 */
void SwDelay_us(uint32 NoOfMicroeSeconds)
{
	sint32 counter;
	counter = NoOfMicroeSeconds * (F_CPU / SECONDS_TO_MICROSECONSD_FACTOR);
 a1c:	dc 01       	movw	r26, r24
 a1e:	cb 01       	movw	r24, r22
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	aa 1f       	adc	r26, r26
 a26:	bb 1f       	adc	r27, r27
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	aa 1f       	adc	r26, r26
 a2e:	bb 1f       	adc	r27, r27
 a30:	88 0f       	add	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	aa 1f       	adc	r26, r26
 a36:	bb 1f       	adc	r27, r27
	while(counter > FALSE)
 a38:	18 16       	cp	r1, r24
 a3a:	19 06       	cpc	r1, r25
 a3c:	1a 06       	cpc	r1, r26
 a3e:	1b 06       	cpc	r1, r27
 a40:	44 f4       	brge	.+16     	; 0xa52 <SwDelay_us+0x36>
	{
			counter =  counter - CYCLE_MICRO_DELAY_FACTOR;
 a42:	0d 97       	sbiw	r24, 0x0d	; 13
 a44:	a1 09       	sbc	r26, r1
 a46:	b1 09       	sbc	r27, r1
 */
void SwDelay_us(uint32 NoOfMicroeSeconds)
{
	sint32 counter;
	counter = NoOfMicroeSeconds * (F_CPU / SECONDS_TO_MICROSECONSD_FACTOR);
	while(counter > FALSE)
 a48:	18 16       	cp	r1, r24
 a4a:	19 06       	cpc	r1, r25
 a4c:	1a 06       	cpc	r1, r26
 a4e:	1b 06       	cpc	r1, r27
 a50:	c4 f3       	brlt	.-16     	; 0xa42 <SwDelay_us+0x26>
 a52:	08 95       	ret

00000a54 <__divsf3>:
 a54:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__divsf3x>
 a58:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_round>
 a5c:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscB>
 a60:	58 f0       	brcs	.+22     	; 0xa78 <__divsf3+0x24>
 a62:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_pscA>
 a66:	40 f0       	brcs	.+16     	; 0xa78 <__divsf3+0x24>
 a68:	29 f4       	brne	.+10     	; 0xa74 <__divsf3+0x20>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	29 f0       	breq	.+10     	; 0xa78 <__divsf3+0x24>
 a6e:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 a72:	51 11       	cpse	r21, r1
 a74:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 a78:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_nan>

00000a7c <__divsf3x>:
 a7c:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_split3>
 a80:	68 f3       	brcs	.-38     	; 0xa5c <__divsf3+0x8>

00000a82 <__divsf3_pse>:
 a82:	99 23       	and	r25, r25
 a84:	b1 f3       	breq	.-20     	; 0xa72 <__divsf3+0x1e>
 a86:	55 23       	and	r21, r21
 a88:	91 f3       	breq	.-28     	; 0xa6e <__divsf3+0x1a>
 a8a:	95 1b       	sub	r25, r21
 a8c:	55 0b       	sbc	r21, r21
 a8e:	bb 27       	eor	r27, r27
 a90:	aa 27       	eor	r26, r26
 a92:	62 17       	cp	r22, r18
 a94:	73 07       	cpc	r23, r19
 a96:	84 07       	cpc	r24, r20
 a98:	38 f0       	brcs	.+14     	; 0xaa8 <__divsf3_pse+0x26>
 a9a:	9f 5f       	subi	r25, 0xFF	; 255
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	22 0f       	add	r18, r18
 aa0:	33 1f       	adc	r19, r19
 aa2:	44 1f       	adc	r20, r20
 aa4:	aa 1f       	adc	r26, r26
 aa6:	a9 f3       	breq	.-22     	; 0xa92 <__divsf3_pse+0x10>
 aa8:	35 d0       	rcall	.+106    	; 0xb14 <__divsf3_pse+0x92>
 aaa:	0e 2e       	mov	r0, r30
 aac:	3a f0       	brmi	.+14     	; 0xabc <__divsf3_pse+0x3a>
 aae:	e0 e8       	ldi	r30, 0x80	; 128
 ab0:	32 d0       	rcall	.+100    	; 0xb16 <__divsf3_pse+0x94>
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	e6 95       	lsr	r30
 ab8:	00 1c       	adc	r0, r0
 aba:	ca f7       	brpl	.-14     	; 0xaae <__divsf3_pse+0x2c>
 abc:	2b d0       	rcall	.+86     	; 0xb14 <__divsf3_pse+0x92>
 abe:	fe 2f       	mov	r31, r30
 ac0:	29 d0       	rcall	.+82     	; 0xb14 <__divsf3_pse+0x92>
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	bb 1f       	adc	r27, r27
 aca:	26 17       	cp	r18, r22
 acc:	37 07       	cpc	r19, r23
 ace:	48 07       	cpc	r20, r24
 ad0:	ab 07       	cpc	r26, r27
 ad2:	b0 e8       	ldi	r27, 0x80	; 128
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__divsf3_pse+0x56>
 ad6:	bb 0b       	sbc	r27, r27
 ad8:	80 2d       	mov	r24, r0
 ada:	bf 01       	movw	r22, r30
 adc:	ff 27       	eor	r31, r31
 ade:	93 58       	subi	r25, 0x83	; 131
 ae0:	5f 4f       	sbci	r21, 0xFF	; 255
 ae2:	3a f0       	brmi	.+14     	; 0xaf2 <__divsf3_pse+0x70>
 ae4:	9e 3f       	cpi	r25, 0xFE	; 254
 ae6:	51 05       	cpc	r21, r1
 ae8:	78 f0       	brcs	.+30     	; 0xb08 <__divsf3_pse+0x86>
 aea:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 aee:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	e4 f3       	brlt	.-8      	; 0xaee <__divsf3_pse+0x6c>
 af6:	98 3e       	cpi	r25, 0xE8	; 232
 af8:	d4 f3       	brlt	.-12     	; 0xaee <__divsf3_pse+0x6c>
 afa:	86 95       	lsr	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f7 95       	ror	r31
 b04:	9f 5f       	subi	r25, 0xFF	; 255
 b06:	c9 f7       	brne	.-14     	; 0xafa <__divsf3_pse+0x78>
 b08:	88 0f       	add	r24, r24
 b0a:	91 1d       	adc	r25, r1
 b0c:	96 95       	lsr	r25
 b0e:	87 95       	ror	r24
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret
 b14:	e1 e0       	ldi	r30, 0x01	; 1
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	bb 1f       	adc	r27, r27
 b1e:	62 17       	cp	r22, r18
 b20:	73 07       	cpc	r23, r19
 b22:	84 07       	cpc	r24, r20
 b24:	ba 07       	cpc	r27, r26
 b26:	20 f0       	brcs	.+8      	; 0xb30 <__divsf3_pse+0xae>
 b28:	62 1b       	sub	r22, r18
 b2a:	73 0b       	sbc	r23, r19
 b2c:	84 0b       	sbc	r24, r20
 b2e:	ba 0b       	sbc	r27, r26
 b30:	ee 1f       	adc	r30, r30
 b32:	88 f7       	brcc	.-30     	; 0xb16 <__divsf3_pse+0x94>
 b34:	e0 95       	com	r30
 b36:	08 95       	ret

00000b38 <__fixunssfsi>:
 b38:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_splitA>
 b3c:	88 f0       	brcs	.+34     	; 0xb60 <__fixunssfsi+0x28>
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	98 f0       	brcs	.+38     	; 0xb68 <__fixunssfsi+0x30>
 b42:	b9 2f       	mov	r27, r25
 b44:	99 27       	eor	r25, r25
 b46:	b7 51       	subi	r27, 0x17	; 23
 b48:	b0 f0       	brcs	.+44     	; 0xb76 <__fixunssfsi+0x3e>
 b4a:	e1 f0       	breq	.+56     	; 0xb84 <__fixunssfsi+0x4c>
 b4c:	66 0f       	add	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	1a f0       	brmi	.+6      	; 0xb5c <__fixunssfsi+0x24>
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__fixunssfsi+0x14>
 b5a:	14 c0       	rjmp	.+40     	; 0xb84 <__fixunssfsi+0x4c>
 b5c:	b1 30       	cpi	r27, 0x01	; 1
 b5e:	91 f0       	breq	.+36     	; 0xb84 <__fixunssfsi+0x4c>
 b60:	0e 94 53 06 	call	0xca6	; 0xca6 <__fp_zero>
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	08 95       	ret
 b68:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_zero>
 b6c:	67 2f       	mov	r22, r23
 b6e:	78 2f       	mov	r23, r24
 b70:	88 27       	eor	r24, r24
 b72:	b8 5f       	subi	r27, 0xF8	; 248
 b74:	39 f0       	breq	.+14     	; 0xb84 <__fixunssfsi+0x4c>
 b76:	b9 3f       	cpi	r27, 0xF9	; 249
 b78:	cc f3       	brlt	.-14     	; 0xb6c <__fixunssfsi+0x34>
 b7a:	86 95       	lsr	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b3 95       	inc	r27
 b82:	d9 f7       	brne	.-10     	; 0xb7a <__fixunssfsi+0x42>
 b84:	3e f4       	brtc	.+14     	; 0xb94 <__fixunssfsi+0x5c>
 b86:	90 95       	com	r25
 b88:	80 95       	com	r24
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	08 95       	ret

00000b96 <__floatundisf>:
 b96:	e8 94       	clt

00000b98 <__fp_di2sf>:
 b98:	f9 2f       	mov	r31, r25
 b9a:	96 eb       	ldi	r25, 0xB6	; 182
 b9c:	ff 23       	and	r31, r31
 b9e:	81 f0       	breq	.+32     	; 0xbc0 <__fp_di2sf+0x28>
 ba0:	12 16       	cp	r1, r18
 ba2:	13 06       	cpc	r1, r19
 ba4:	14 06       	cpc	r1, r20
 ba6:	44 0b       	sbc	r20, r20
 ba8:	93 95       	inc	r25
 baa:	f6 95       	lsr	r31
 bac:	87 95       	ror	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	57 95       	ror	r21
 bb4:	40 40       	sbci	r20, 0x00	; 0
 bb6:	ff 23       	and	r31, r31
 bb8:	b9 f7       	brne	.-18     	; 0xba8 <__fp_di2sf+0x10>
 bba:	1b c0       	rjmp	.+54     	; 0xbf2 <__fp_di2sf+0x5a>
 bbc:	99 27       	eor	r25, r25
 bbe:	08 95       	ret
 bc0:	88 23       	and	r24, r24
 bc2:	51 f4       	brne	.+20     	; 0xbd8 <__fp_di2sf+0x40>
 bc4:	98 50       	subi	r25, 0x08	; 8
 bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__fp_di2sf+0x24>
 bc8:	87 2b       	or	r24, r23
 bca:	76 2f       	mov	r23, r22
 bcc:	65 2f       	mov	r22, r21
 bce:	54 2f       	mov	r21, r20
 bd0:	43 2f       	mov	r20, r19
 bd2:	32 2f       	mov	r19, r18
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	b1 f3       	breq	.-20     	; 0xbc4 <__fp_di2sf+0x2c>
 bd8:	12 16       	cp	r1, r18
 bda:	13 06       	cpc	r1, r19
 bdc:	14 06       	cpc	r1, r20
 bde:	44 0b       	sbc	r20, r20
 be0:	88 23       	and	r24, r24
 be2:	3a f0       	brmi	.+14     	; 0xbf2 <__fp_di2sf+0x5a>
 be4:	9a 95       	dec	r25
 be6:	44 0f       	add	r20, r20
 be8:	55 1f       	adc	r21, r21
 bea:	66 1f       	adc	r22, r22
 bec:	77 1f       	adc	r23, r23
 bee:	88 1f       	adc	r24, r24
 bf0:	ca f7       	brpl	.-14     	; 0xbe4 <__fp_di2sf+0x4c>
 bf2:	55 23       	and	r21, r21
 bf4:	4a f4       	brpl	.+18     	; 0xc08 <__fp_di2sf+0x70>
 bf6:	44 0f       	add	r20, r20
 bf8:	55 1f       	adc	r21, r21
 bfa:	11 f4       	brne	.+4      	; 0xc00 <__fp_di2sf+0x68>
 bfc:	60 ff       	sbrs	r22, 0
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__fp_di2sf+0x70>
 c00:	6f 5f       	subi	r22, 0xFF	; 255
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	88 0f       	add	r24, r24
 c0a:	96 95       	lsr	r25
 c0c:	87 95       	ror	r24
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret

00000c12 <__fp_inf>:
 c12:	97 f9       	bld	r25, 7
 c14:	9f 67       	ori	r25, 0x7F	; 127
 c16:	80 e8       	ldi	r24, 0x80	; 128
 c18:	70 e0       	ldi	r23, 0x00	; 0
 c1a:	60 e0       	ldi	r22, 0x00	; 0
 c1c:	08 95       	ret

00000c1e <__fp_nan>:
 c1e:	9f ef       	ldi	r25, 0xFF	; 255
 c20:	80 ec       	ldi	r24, 0xC0	; 192
 c22:	08 95       	ret

00000c24 <__fp_pscA>:
 c24:	00 24       	eor	r0, r0
 c26:	0a 94       	dec	r0
 c28:	16 16       	cp	r1, r22
 c2a:	17 06       	cpc	r1, r23
 c2c:	18 06       	cpc	r1, r24
 c2e:	09 06       	cpc	r0, r25
 c30:	08 95       	ret

00000c32 <__fp_pscB>:
 c32:	00 24       	eor	r0, r0
 c34:	0a 94       	dec	r0
 c36:	12 16       	cp	r1, r18
 c38:	13 06       	cpc	r1, r19
 c3a:	14 06       	cpc	r1, r20
 c3c:	05 06       	cpc	r0, r21
 c3e:	08 95       	ret

00000c40 <__fp_round>:
 c40:	09 2e       	mov	r0, r25
 c42:	03 94       	inc	r0
 c44:	00 0c       	add	r0, r0
 c46:	11 f4       	brne	.+4      	; 0xc4c <__fp_round+0xc>
 c48:	88 23       	and	r24, r24
 c4a:	52 f0       	brmi	.+20     	; 0xc60 <__fp_round+0x20>
 c4c:	bb 0f       	add	r27, r27
 c4e:	40 f4       	brcc	.+16     	; 0xc60 <__fp_round+0x20>
 c50:	bf 2b       	or	r27, r31
 c52:	11 f4       	brne	.+4      	; 0xc58 <__fp_round+0x18>
 c54:	60 ff       	sbrs	r22, 0
 c56:	04 c0       	rjmp	.+8      	; 0xc60 <__fp_round+0x20>
 c58:	6f 5f       	subi	r22, 0xFF	; 255
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255
 c5c:	8f 4f       	sbci	r24, 0xFF	; 255
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	08 95       	ret

00000c62 <__fp_split3>:
 c62:	57 fd       	sbrc	r21, 7
 c64:	90 58       	subi	r25, 0x80	; 128
 c66:	44 0f       	add	r20, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	59 f0       	breq	.+22     	; 0xc82 <__fp_splitA+0x10>
 c6c:	5f 3f       	cpi	r21, 0xFF	; 255
 c6e:	71 f0       	breq	.+28     	; 0xc8c <__fp_splitA+0x1a>
 c70:	47 95       	ror	r20

00000c72 <__fp_splitA>:
 c72:	88 0f       	add	r24, r24
 c74:	97 fb       	bst	r25, 7
 c76:	99 1f       	adc	r25, r25
 c78:	61 f0       	breq	.+24     	; 0xc92 <__fp_splitA+0x20>
 c7a:	9f 3f       	cpi	r25, 0xFF	; 255
 c7c:	79 f0       	breq	.+30     	; 0xc9c <__fp_splitA+0x2a>
 c7e:	87 95       	ror	r24
 c80:	08 95       	ret
 c82:	12 16       	cp	r1, r18
 c84:	13 06       	cpc	r1, r19
 c86:	14 06       	cpc	r1, r20
 c88:	55 1f       	adc	r21, r21
 c8a:	f2 cf       	rjmp	.-28     	; 0xc70 <__fp_split3+0xe>
 c8c:	46 95       	lsr	r20
 c8e:	f1 df       	rcall	.-30     	; 0xc72 <__fp_splitA>
 c90:	08 c0       	rjmp	.+16     	; 0xca2 <__fp_splitA+0x30>
 c92:	16 16       	cp	r1, r22
 c94:	17 06       	cpc	r1, r23
 c96:	18 06       	cpc	r1, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	f1 cf       	rjmp	.-30     	; 0xc7e <__fp_splitA+0xc>
 c9c:	86 95       	lsr	r24
 c9e:	71 05       	cpc	r23, r1
 ca0:	61 05       	cpc	r22, r1
 ca2:	08 94       	sec
 ca4:	08 95       	ret

00000ca6 <__fp_zero>:
 ca6:	e8 94       	clt

00000ca8 <__fp_szero>:
 ca8:	bb 27       	eor	r27, r27
 caa:	66 27       	eor	r22, r22
 cac:	77 27       	eor	r23, r23
 cae:	cb 01       	movw	r24, r22
 cb0:	97 f9       	bld	r25, 7
 cb2:	08 95       	ret

00000cb4 <__mulsf3>:
 cb4:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3x>
 cb8:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_round>
 cbc:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_pscA>
 cc0:	38 f0       	brcs	.+14     	; 0xcd0 <__mulsf3+0x1c>
 cc2:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscB>
 cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__mulsf3+0x1c>
 cc8:	95 23       	and	r25, r21
 cca:	11 f0       	breq	.+4      	; 0xcd0 <__mulsf3+0x1c>
 ccc:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 cd0:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_nan>
 cd4:	11 24       	eor	r1, r1
 cd6:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>

00000cda <__mulsf3x>:
 cda:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_split3>
 cde:	70 f3       	brcs	.-36     	; 0xcbc <__mulsf3+0x8>

00000ce0 <__mulsf3_pse>:
 ce0:	95 9f       	mul	r25, r21
 ce2:	c1 f3       	breq	.-16     	; 0xcd4 <__mulsf3+0x20>
 ce4:	95 0f       	add	r25, r21
 ce6:	50 e0       	ldi	r21, 0x00	; 0
 ce8:	55 1f       	adc	r21, r21
 cea:	62 9f       	mul	r22, r18
 cec:	f0 01       	movw	r30, r0
 cee:	72 9f       	mul	r23, r18
 cf0:	bb 27       	eor	r27, r27
 cf2:	f0 0d       	add	r31, r0
 cf4:	b1 1d       	adc	r27, r1
 cf6:	63 9f       	mul	r22, r19
 cf8:	aa 27       	eor	r26, r26
 cfa:	f0 0d       	add	r31, r0
 cfc:	b1 1d       	adc	r27, r1
 cfe:	aa 1f       	adc	r26, r26
 d00:	64 9f       	mul	r22, r20
 d02:	66 27       	eor	r22, r22
 d04:	b0 0d       	add	r27, r0
 d06:	a1 1d       	adc	r26, r1
 d08:	66 1f       	adc	r22, r22
 d0a:	82 9f       	mul	r24, r18
 d0c:	22 27       	eor	r18, r18
 d0e:	b0 0d       	add	r27, r0
 d10:	a1 1d       	adc	r26, r1
 d12:	62 1f       	adc	r22, r18
 d14:	73 9f       	mul	r23, r19
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	62 1f       	adc	r22, r18
 d1c:	83 9f       	mul	r24, r19
 d1e:	a0 0d       	add	r26, r0
 d20:	61 1d       	adc	r22, r1
 d22:	22 1f       	adc	r18, r18
 d24:	74 9f       	mul	r23, r20
 d26:	33 27       	eor	r19, r19
 d28:	a0 0d       	add	r26, r0
 d2a:	61 1d       	adc	r22, r1
 d2c:	23 1f       	adc	r18, r19
 d2e:	84 9f       	mul	r24, r20
 d30:	60 0d       	add	r22, r0
 d32:	21 1d       	adc	r18, r1
 d34:	82 2f       	mov	r24, r18
 d36:	76 2f       	mov	r23, r22
 d38:	6a 2f       	mov	r22, r26
 d3a:	11 24       	eor	r1, r1
 d3c:	9f 57       	subi	r25, 0x7F	; 127
 d3e:	50 40       	sbci	r21, 0x00	; 0
 d40:	9a f0       	brmi	.+38     	; 0xd68 <__mulsf3_pse+0x88>
 d42:	f1 f0       	breq	.+60     	; 0xd80 <__mulsf3_pse+0xa0>
 d44:	88 23       	and	r24, r24
 d46:	4a f0       	brmi	.+18     	; 0xd5a <__mulsf3_pse+0x7a>
 d48:	ee 0f       	add	r30, r30
 d4a:	ff 1f       	adc	r31, r31
 d4c:	bb 1f       	adc	r27, r27
 d4e:	66 1f       	adc	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	88 1f       	adc	r24, r24
 d54:	91 50       	subi	r25, 0x01	; 1
 d56:	50 40       	sbci	r21, 0x00	; 0
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__mulsf3_pse+0x64>
 d5a:	9e 3f       	cpi	r25, 0xFE	; 254
 d5c:	51 05       	cpc	r21, r1
 d5e:	80 f0       	brcs	.+32     	; 0xd80 <__mulsf3_pse+0xa0>
 d60:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 d64:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 d68:	5f 3f       	cpi	r21, 0xFF	; 255
 d6a:	e4 f3       	brlt	.-8      	; 0xd64 <__mulsf3_pse+0x84>
 d6c:	98 3e       	cpi	r25, 0xE8	; 232
 d6e:	d4 f3       	brlt	.-12     	; 0xd64 <__mulsf3_pse+0x84>
 d70:	86 95       	lsr	r24
 d72:	77 95       	ror	r23
 d74:	67 95       	ror	r22
 d76:	b7 95       	ror	r27
 d78:	f7 95       	ror	r31
 d7a:	e7 95       	ror	r30
 d7c:	9f 5f       	subi	r25, 0xFF	; 255
 d7e:	c1 f7       	brne	.-16     	; 0xd70 <__mulsf3_pse+0x90>
 d80:	fe 2b       	or	r31, r30
 d82:	88 0f       	add	r24, r24
 d84:	91 1d       	adc	r25, r1
 d86:	96 95       	lsr	r25
 d88:	87 95       	ror	r24
 d8a:	97 f9       	bld	r25, 7
 d8c:	08 95       	ret

00000d8e <__udivmodsi4>:
 d8e:	a1 e2       	ldi	r26, 0x21	; 33
 d90:	1a 2e       	mov	r1, r26
 d92:	aa 1b       	sub	r26, r26
 d94:	bb 1b       	sub	r27, r27
 d96:	fd 01       	movw	r30, r26
 d98:	0d c0       	rjmp	.+26     	; 0xdb4 <__udivmodsi4_ep>

00000d9a <__udivmodsi4_loop>:
 d9a:	aa 1f       	adc	r26, r26
 d9c:	bb 1f       	adc	r27, r27
 d9e:	ee 1f       	adc	r30, r30
 da0:	ff 1f       	adc	r31, r31
 da2:	a2 17       	cp	r26, r18
 da4:	b3 07       	cpc	r27, r19
 da6:	e4 07       	cpc	r30, r20
 da8:	f5 07       	cpc	r31, r21
 daa:	20 f0       	brcs	.+8      	; 0xdb4 <__udivmodsi4_ep>
 dac:	a2 1b       	sub	r26, r18
 dae:	b3 0b       	sbc	r27, r19
 db0:	e4 0b       	sbc	r30, r20
 db2:	f5 0b       	sbc	r31, r21

00000db4 <__udivmodsi4_ep>:
 db4:	66 1f       	adc	r22, r22
 db6:	77 1f       	adc	r23, r23
 db8:	88 1f       	adc	r24, r24
 dba:	99 1f       	adc	r25, r25
 dbc:	1a 94       	dec	r1
 dbe:	69 f7       	brne	.-38     	; 0xd9a <__udivmodsi4_loop>
 dc0:	60 95       	com	r22
 dc2:	70 95       	com	r23
 dc4:	80 95       	com	r24
 dc6:	90 95       	com	r25
 dc8:	9b 01       	movw	r18, r22
 dca:	ac 01       	movw	r20, r24
 dcc:	bd 01       	movw	r22, r26
 dce:	cf 01       	movw	r24, r30
 dd0:	08 95       	ret

00000dd2 <__umulhisi3>:
 dd2:	a2 9f       	mul	r26, r18
 dd4:	b0 01       	movw	r22, r0
 dd6:	b3 9f       	mul	r27, r19
 dd8:	c0 01       	movw	r24, r0
 dda:	a3 9f       	mul	r26, r19
 ddc:	70 0d       	add	r23, r0
 dde:	81 1d       	adc	r24, r1
 de0:	11 24       	eor	r1, r1
 de2:	91 1d       	adc	r25, r1
 de4:	b2 9f       	mul	r27, r18
 de6:	70 0d       	add	r23, r0
 de8:	81 1d       	adc	r24, r1
 dea:	11 24       	eor	r1, r1
 dec:	91 1d       	adc	r25, r1
 dee:	08 95       	ret

00000df0 <__usmulhisi3>:
 df0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__umulhisi3>

00000df4 <__usmulhisi3_tail>:
 df4:	b7 ff       	sbrs	r27, 7
 df6:	08 95       	ret
 df8:	82 1b       	sub	r24, r18
 dfa:	93 0b       	sbc	r25, r19
 dfc:	08 95       	ret

00000dfe <__muluhisi3>:
 dfe:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__umulhisi3>
 e02:	a5 9f       	mul	r26, r21
 e04:	90 0d       	add	r25, r0
 e06:	b4 9f       	mul	r27, r20
 e08:	90 0d       	add	r25, r0
 e0a:	a4 9f       	mul	r26, r20
 e0c:	80 0d       	add	r24, r0
 e0e:	91 1d       	adc	r25, r1
 e10:	11 24       	eor	r1, r1
 e12:	08 95       	ret

00000e14 <_exit>:
 e14:	f8 94       	cli

00000e16 <__stop_program>:
 e16:	ff cf       	rjmp	.-2      	; 0xe16 <__stop_program>
